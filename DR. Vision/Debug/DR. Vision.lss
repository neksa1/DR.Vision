
DR. Vision.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00800060  00000c96  00000d2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008000e6  008000e6  00000db0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ee7  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000495  00000000  00000000  00002dff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000088d  00000000  00000000  00003294  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002ec  00000000  00000000  00003b24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b8  00000000  00000000  00003e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c92  00000000  00000000  000041c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d8  00000000  00000000  00004e5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 98 02 	jmp	0x530	; 0x530 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e9       	ldi	r30, 0x96	; 150
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3e       	cpi	r26, 0xE6	; 230
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 ee       	ldi	r26, 0xE6	; 230
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3f       	cpi	r26, 0xF0	; 240
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6e 03 	call	0x6dc	; 0x6dc <main>
  8a:	0c 94 49 06 	jmp	0xc92	; 0xc92 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pinChange>:
	pinChange(D3,0);
	
	if(a & 16)
	pinChange(D4,1);
	else
	pinChange(D4,0);
  92:	67 2b       	or	r22, r23
  94:	09 f0       	breq	.+2      	; 0x98 <pinChange+0x6>
  96:	9f c0       	rjmp	.+318    	; 0x1d6 <pinChange+0x144>
  98:	00 97       	sbiw	r24, 0x00	; 0

	if(a & 32)
  9a:	11 f4       	brne	.+4      	; 0xa0 <pinChange+0xe>
  9c:	d8 98       	cbi	0x1b, 0	; 27
	pinChange(D5,1);
  9e:	08 95       	ret
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	91 05       	cpc	r25, r1
  a4:	11 f4       	brne	.+4      	; 0xaa <pinChange+0x18>
  a6:	d9 98       	cbi	0x1b, 1	; 27
  a8:	08 95       	ret
  aa:	82 30       	cpi	r24, 0x02	; 2
	else
	pinChange(D5,0);
  ac:	91 05       	cpc	r25, r1
  ae:	11 f4       	brne	.+4      	; 0xb4 <pinChange+0x22>
  b0:	da 98       	cbi	0x1b, 2	; 27
  b2:	08 95       	ret
  b4:	83 30       	cpi	r24, 0x03	; 3
  b6:	91 05       	cpc	r25, r1
	
	if(a & 64)
  b8:	11 f4       	brne	.+4      	; 0xbe <pinChange+0x2c>
  ba:	db 98       	cbi	0x1b, 3	; 27
	pinChange(D6,1);
  bc:	08 95       	ret
  be:	84 30       	cpi	r24, 0x04	; 4
  c0:	91 05       	cpc	r25, r1
  c2:	11 f4       	brne	.+4      	; 0xc8 <pinChange+0x36>
  c4:	dc 98       	cbi	0x1b, 4	; 27
  c6:	08 95       	ret
  c8:	85 30       	cpi	r24, 0x05	; 5
	else
	pinChange(D6,0);
  ca:	91 05       	cpc	r25, r1
  cc:	11 f4       	brne	.+4      	; 0xd2 <pinChange+0x40>
  ce:	dd 98       	cbi	0x1b, 5	; 27
  d0:	08 95       	ret
  d2:	86 30       	cpi	r24, 0x06	; 6
  d4:	91 05       	cpc	r25, r1
	
	if(a & 128)
  d6:	11 f4       	brne	.+4      	; 0xdc <pinChange+0x4a>
  d8:	de 98       	cbi	0x1b, 6	; 27
	pinChange(D7,1);
  da:	08 95       	ret
  dc:	87 30       	cpi	r24, 0x07	; 7
  de:	91 05       	cpc	r25, r1
  e0:	11 f4       	brne	.+4      	; 0xe6 <pinChange+0x54>
  e2:	df 98       	cbi	0x1b, 7	; 27
  e4:	08 95       	ret
  e6:	8a 30       	cpi	r24, 0x0A	; 10
	else
	pinChange(D7,0);
  e8:	91 05       	cpc	r25, r1
  ea:	11 f4       	brne	.+4      	; 0xf0 <pinChange+0x5e>
  ec:	c0 98       	cbi	0x18, 0	; 24
  ee:	08 95       	ret
  f0:	8b 30       	cpi	r24, 0x0B	; 11
  f2:	91 05       	cpc	r25, r1
}
  f4:	11 f4       	brne	.+4      	; 0xfa <pinChange+0x68>
  f6:	c1 98       	cbi	0x18, 1	; 24
		else if(a == eS_PORTA7)
		  PORTA &= ~(1<<PA7);
		else if(a == eS_PORTB0)
		  PORTB &= ~(1<<PB0);  
		else if(a == eS_PORTB1)
		  PORTB &= ~(1<<PB1);
  f8:	08 95       	ret
		else if(a == eS_PORTB2)
  fa:	8c 30       	cpi	r24, 0x0C	; 12
  fc:	91 05       	cpc	r25, r1
  fe:	11 f4       	brne	.+4      	; 0x104 <pinChange+0x72>
		  PORTB &= ~(1<<PB2);  
 100:	c2 98       	cbi	0x18, 2	; 24
 102:	08 95       	ret
		else if(a == eS_PORTB3)
 104:	8d 30       	cpi	r24, 0x0D	; 13
 106:	91 05       	cpc	r25, r1
 108:	11 f4       	brne	.+4      	; 0x10e <pinChange+0x7c>
		  PORTB &= ~(1<<PB3);  
 10a:	c3 98       	cbi	0x18, 3	; 24
 10c:	08 95       	ret
		else if(a == eS_PORTB4)
 10e:	8e 30       	cpi	r24, 0x0E	; 14
 110:	91 05       	cpc	r25, r1
 112:	11 f4       	brne	.+4      	; 0x118 <pinChange+0x86>
		  PORTB &= ~(1<<PB4);  
 114:	c4 98       	cbi	0x18, 4	; 24
 116:	08 95       	ret
		else if(a == eS_PORTB5)
 118:	8f 30       	cpi	r24, 0x0F	; 15
 11a:	91 05       	cpc	r25, r1
 11c:	11 f4       	brne	.+4      	; 0x122 <pinChange+0x90>
		  PORTB &= ~(1<<PB5);  
 11e:	c5 98       	cbi	0x18, 5	; 24
 120:	08 95       	ret
		else if(a == eS_PORTB6)
 122:	80 31       	cpi	r24, 0x10	; 16
 124:	91 05       	cpc	r25, r1
 126:	11 f4       	brne	.+4      	; 0x12c <pinChange+0x9a>
		  PORTB &= ~(1<<PB6);  
 128:	c6 98       	cbi	0x18, 6	; 24
 12a:	08 95       	ret
		else if(a == eS_PORTB7)
 12c:	81 31       	cpi	r24, 0x11	; 17
 12e:	91 05       	cpc	r25, r1
 130:	11 f4       	brne	.+4      	; 0x136 <pinChange+0xa4>
		  PORTB &= ~(1<<PB7);
 132:	c7 98       	cbi	0x18, 7	; 24
 134:	08 95       	ret
		else if(a == eS_PORTC0)
 136:	84 31       	cpi	r24, 0x14	; 20
 138:	91 05       	cpc	r25, r1
 13a:	11 f4       	brne	.+4      	; 0x140 <pinChange+0xae>
		  PORTC &= ~(1<<PC0);   
 13c:	a8 98       	cbi	0x15, 0	; 21
 13e:	08 95       	ret
		else if(a == eS_PORTC1)
 140:	85 31       	cpi	r24, 0x15	; 21
 142:	91 05       	cpc	r25, r1
 144:	11 f4       	brne	.+4      	; 0x14a <pinChange+0xb8>
		  PORTC &= ~(1<<PC1); 
 146:	a9 98       	cbi	0x15, 1	; 21
 148:	08 95       	ret
		else if(a == eS_PORTC2)
 14a:	86 31       	cpi	r24, 0x16	; 22
 14c:	91 05       	cpc	r25, r1
 14e:	11 f4       	brne	.+4      	; 0x154 <pinChange+0xc2>
		  PORTC &= ~(1<<PC2);
 150:	aa 98       	cbi	0x15, 2	; 21
 152:	08 95       	ret
		else if(a == eS_PORTC3)
 154:	87 31       	cpi	r24, 0x17	; 23
 156:	91 05       	cpc	r25, r1
 158:	11 f4       	brne	.+4      	; 0x15e <pinChange+0xcc>
		  PORTC &= ~(1<<PC3);   
 15a:	ab 98       	cbi	0x15, 3	; 21
 15c:	08 95       	ret
		else if(a == eS_PORTC4)
 15e:	88 31       	cpi	r24, 0x18	; 24
 160:	91 05       	cpc	r25, r1
 162:	11 f4       	brne	.+4      	; 0x168 <pinChange+0xd6>
		  PORTC &= ~(1<<PC4);  
 164:	ac 98       	cbi	0x15, 4	; 21
 166:	08 95       	ret
		else if(a == eS_PORTC5)
 168:	89 31       	cpi	r24, 0x19	; 25
 16a:	91 05       	cpc	r25, r1
 16c:	11 f4       	brne	.+4      	; 0x172 <pinChange+0xe0>
		  PORTC &= ~(1<<PC5);  
 16e:	ad 98       	cbi	0x15, 5	; 21
 170:	08 95       	ret
        else if(a == eS_PORTC6)
 172:	8a 31       	cpi	r24, 0x1A	; 26
 174:	91 05       	cpc	r25, r1
 176:	11 f4       	brne	.+4      	; 0x17c <pinChange+0xea>
          PORTC &= ~(1<<PC6);		
 178:	ae 98       	cbi	0x15, 6	; 21
 17a:	08 95       	ret
		else if(a == eS_PORTC7)
 17c:	8b 31       	cpi	r24, 0x1B	; 27
 17e:	91 05       	cpc	r25, r1
 180:	11 f4       	brne	.+4      	; 0x186 <pinChange+0xf4>
		  PORTC &= ~(1<<PC7);
 182:	af 98       	cbi	0x15, 7	; 21
 184:	08 95       	ret
		else if(a == eS_PORTD0)
 186:	8e 31       	cpi	r24, 0x1E	; 30
 188:	91 05       	cpc	r25, r1
 18a:	11 f4       	brne	.+4      	; 0x190 <pinChange+0xfe>
		  PORTD &= ~(1<<PD0);
 18c:	90 98       	cbi	0x12, 0	; 18
 18e:	08 95       	ret
		else if(a == eS_PORTD1)
 190:	8f 31       	cpi	r24, 0x1F	; 31
 192:	91 05       	cpc	r25, r1
 194:	11 f4       	brne	.+4      	; 0x19a <pinChange+0x108>
		  PORTD &= ~(1<<PD1);  
 196:	91 98       	cbi	0x12, 1	; 18
 198:	08 95       	ret
		else if(a == eS_PORTD2)
 19a:	80 32       	cpi	r24, 0x20	; 32
 19c:	91 05       	cpc	r25, r1
 19e:	11 f4       	brne	.+4      	; 0x1a4 <pinChange+0x112>
		  PORTD &= ~(1<<PD2);
 1a0:	92 98       	cbi	0x12, 2	; 18
 1a2:	08 95       	ret
		else if(a == eS_PORTD3)
 1a4:	81 32       	cpi	r24, 0x21	; 33
 1a6:	91 05       	cpc	r25, r1
 1a8:	11 f4       	brne	.+4      	; 0x1ae <pinChange+0x11c>
		  PORTD &= ~(1<<PD3);
 1aa:	93 98       	cbi	0x12, 3	; 18
 1ac:	08 95       	ret
		else if(a == eS_PORTD4)
 1ae:	82 32       	cpi	r24, 0x22	; 34
 1b0:	91 05       	cpc	r25, r1
 1b2:	11 f4       	brne	.+4      	; 0x1b8 <pinChange+0x126>
		  PORTD &= ~(1<<PD4);
 1b4:	94 98       	cbi	0x12, 4	; 18
 1b6:	08 95       	ret
		else if(a == eS_PORTD5)
 1b8:	83 32       	cpi	r24, 0x23	; 35
 1ba:	91 05       	cpc	r25, r1
 1bc:	11 f4       	brne	.+4      	; 0x1c2 <pinChange+0x130>
		  PORTD &= ~(1<<PD5);
 1be:	95 98       	cbi	0x12, 5	; 18
 1c0:	08 95       	ret
		else if(a == eS_PORTD6)
 1c2:	84 32       	cpi	r24, 0x24	; 36
 1c4:	91 05       	cpc	r25, r1
 1c6:	11 f4       	brne	.+4      	; 0x1cc <pinChange+0x13a>
		  PORTD &= ~(1<<PD6);   
 1c8:	96 98       	cbi	0x12, 6	; 18
 1ca:	08 95       	ret
		else if(a == eS_PORTD7)
 1cc:	85 97       	sbiw	r24, 0x25	; 37
 1ce:	09 f0       	breq	.+2      	; 0x1d2 <pinChange+0x140>
 1d0:	9f c0       	rjmp	.+318    	; 0x310 <pinChange+0x27e>
		  PORTD &= ~(1<<PD7);   
 1d2:	97 98       	cbi	0x12, 7	; 18
 1d4:	08 95       	ret
		  //else if(a == eS_PORTJ1)
		  //PORTJ &= ~(1<<PJ1);        
	}
	else
	{
		if(a == eS_PORTA0)
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	11 f4       	brne	.+4      	; 0x1de <pinChange+0x14c>
		  PORTA |= (1<<PA0);
 1da:	d8 9a       	sbi	0x1b, 0	; 27
 1dc:	08 95       	ret
		else if(a == eS_PORTA1)
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	91 05       	cpc	r25, r1
 1e2:	11 f4       	brne	.+4      	; 0x1e8 <pinChange+0x156>
		  PORTA |= (1<<PA1);
 1e4:	d9 9a       	sbi	0x1b, 1	; 27
 1e6:	08 95       	ret
		else if(a == eS_PORTA2)
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	91 05       	cpc	r25, r1
 1ec:	11 f4       	brne	.+4      	; 0x1f2 <pinChange+0x160>
		  PORTA |= (1<<PA2);
 1ee:	da 9a       	sbi	0x1b, 2	; 27
 1f0:	08 95       	ret
		else if(a == eS_PORTA3)
 1f2:	83 30       	cpi	r24, 0x03	; 3
 1f4:	91 05       	cpc	r25, r1
 1f6:	11 f4       	brne	.+4      	; 0x1fc <pinChange+0x16a>
		  PORTA |= (1<<PA3);
 1f8:	db 9a       	sbi	0x1b, 3	; 27
 1fa:	08 95       	ret
		else if(a == eS_PORTA4)
 1fc:	84 30       	cpi	r24, 0x04	; 4
 1fe:	91 05       	cpc	r25, r1
 200:	11 f4       	brne	.+4      	; 0x206 <pinChange+0x174>
		  PORTA |= (1<<PA4);
 202:	dc 9a       	sbi	0x1b, 4	; 27
 204:	08 95       	ret
		else if(a == eS_PORTA5)
 206:	85 30       	cpi	r24, 0x05	; 5
 208:	91 05       	cpc	r25, r1
 20a:	11 f4       	brne	.+4      	; 0x210 <pinChange+0x17e>
		  PORTA |= (1<<PA5);
 20c:	dd 9a       	sbi	0x1b, 5	; 27
 20e:	08 95       	ret
		else if(a == eS_PORTA6)
 210:	86 30       	cpi	r24, 0x06	; 6
 212:	91 05       	cpc	r25, r1
 214:	11 f4       	brne	.+4      	; 0x21a <pinChange+0x188>
		  PORTA |= (1<<PA6);
 216:	de 9a       	sbi	0x1b, 6	; 27
 218:	08 95       	ret
		else if(a == eS_PORTA7)
 21a:	87 30       	cpi	r24, 0x07	; 7
 21c:	91 05       	cpc	r25, r1
 21e:	11 f4       	brne	.+4      	; 0x224 <pinChange+0x192>
		  PORTA |= (1<<PA7);
 220:	df 9a       	sbi	0x1b, 7	; 27
 222:	08 95       	ret
		else if(a == eS_PORTB0)
 224:	8a 30       	cpi	r24, 0x0A	; 10
 226:	91 05       	cpc	r25, r1
 228:	11 f4       	brne	.+4      	; 0x22e <pinChange+0x19c>
	  	  PORTB |= (1<<PB0);
 22a:	c0 9a       	sbi	0x18, 0	; 24
 22c:	08 95       	ret
		else if(a == eS_PORTB1)
 22e:	8b 30       	cpi	r24, 0x0B	; 11
 230:	91 05       	cpc	r25, r1
 232:	11 f4       	brne	.+4      	; 0x238 <pinChange+0x1a6>
		  PORTB |= (1<<PB1);
 234:	c1 9a       	sbi	0x18, 1	; 24
 236:	08 95       	ret
		else if(a == eS_PORTB2)
 238:	8c 30       	cpi	r24, 0x0C	; 12
 23a:	91 05       	cpc	r25, r1
 23c:	11 f4       	brne	.+4      	; 0x242 <pinChange+0x1b0>
		  PORTB |= (1<<PB2);
 23e:	c2 9a       	sbi	0x18, 2	; 24
 240:	08 95       	ret
		else if(a == eS_PORTB3)
 242:	8d 30       	cpi	r24, 0x0D	; 13
 244:	91 05       	cpc	r25, r1
 246:	11 f4       	brne	.+4      	; 0x24c <pinChange+0x1ba>
		  PORTB |= (1<<PB3);
 248:	c3 9a       	sbi	0x18, 3	; 24
 24a:	08 95       	ret
		else if(a == eS_PORTB4)
 24c:	8e 30       	cpi	r24, 0x0E	; 14
 24e:	91 05       	cpc	r25, r1
 250:	11 f4       	brne	.+4      	; 0x256 <pinChange+0x1c4>
		  PORTB |= (1<<PB4);
 252:	c4 9a       	sbi	0x18, 4	; 24
 254:	08 95       	ret
		else if(a == eS_PORTB5)
 256:	8f 30       	cpi	r24, 0x0F	; 15
 258:	91 05       	cpc	r25, r1
 25a:	11 f4       	brne	.+4      	; 0x260 <pinChange+0x1ce>
		  PORTB |= (1<<PB5);
 25c:	c5 9a       	sbi	0x18, 5	; 24
 25e:	08 95       	ret
		else if(a == eS_PORTB6)
 260:	80 31       	cpi	r24, 0x10	; 16
 262:	91 05       	cpc	r25, r1
 264:	11 f4       	brne	.+4      	; 0x26a <pinChange+0x1d8>
		  PORTB |= (1<<PB6);
 266:	c6 9a       	sbi	0x18, 6	; 24
 268:	08 95       	ret
		else if(a == eS_PORTB7)
 26a:	81 31       	cpi	r24, 0x11	; 17
 26c:	91 05       	cpc	r25, r1
 26e:	11 f4       	brne	.+4      	; 0x274 <pinChange+0x1e2>
		  PORTB |= (1<<PB7);
 270:	c7 9a       	sbi	0x18, 7	; 24
 272:	08 95       	ret
		else if(a == eS_PORTC0)
 274:	84 31       	cpi	r24, 0x14	; 20
 276:	91 05       	cpc	r25, r1
 278:	11 f4       	brne	.+4      	; 0x27e <pinChange+0x1ec>
		  PORTC |= (1<<PC0);
 27a:	a8 9a       	sbi	0x15, 0	; 21
 27c:	08 95       	ret
		else if(a == eS_PORTC1)
 27e:	85 31       	cpi	r24, 0x15	; 21
 280:	91 05       	cpc	r25, r1
 282:	11 f4       	brne	.+4      	; 0x288 <pinChange+0x1f6>
		  PORTC |= (1<<PC1);
 284:	a9 9a       	sbi	0x15, 1	; 21
 286:	08 95       	ret
		else if(a == eS_PORTC2)
 288:	86 31       	cpi	r24, 0x16	; 22
 28a:	91 05       	cpc	r25, r1
 28c:	11 f4       	brne	.+4      	; 0x292 <pinChange+0x200>
	  	  PORTC |= (1<<PC2);
 28e:	aa 9a       	sbi	0x15, 2	; 21
 290:	08 95       	ret
		else if(a == eS_PORTC3)
 292:	87 31       	cpi	r24, 0x17	; 23
 294:	91 05       	cpc	r25, r1
 296:	11 f4       	brne	.+4      	; 0x29c <pinChange+0x20a>
		  PORTC |= (1<<PC3);
 298:	ab 9a       	sbi	0x15, 3	; 21
 29a:	08 95       	ret
		else if(a == eS_PORTC4)
 29c:	88 31       	cpi	r24, 0x18	; 24
 29e:	91 05       	cpc	r25, r1
 2a0:	11 f4       	brne	.+4      	; 0x2a6 <pinChange+0x214>
		  PORTC |= (1<<PC4);
 2a2:	ac 9a       	sbi	0x15, 4	; 21
 2a4:	08 95       	ret
		else if(a == eS_PORTC5)
 2a6:	89 31       	cpi	r24, 0x19	; 25
 2a8:	91 05       	cpc	r25, r1
 2aa:	11 f4       	brne	.+4      	; 0x2b0 <pinChange+0x21e>
		  PORTC |= (1<<PC5);
 2ac:	ad 9a       	sbi	0x15, 5	; 21
 2ae:	08 95       	ret
		else if(a == eS_PORTC6)
 2b0:	8a 31       	cpi	r24, 0x1A	; 26
 2b2:	91 05       	cpc	r25, r1
 2b4:	11 f4       	brne	.+4      	; 0x2ba <pinChange+0x228>
		  PORTC |= (1<<PC6);  
 2b6:	ae 9a       	sbi	0x15, 6	; 21
 2b8:	08 95       	ret
		else if(a == eS_PORTC7)
 2ba:	8b 31       	cpi	r24, 0x1B	; 27
 2bc:	91 05       	cpc	r25, r1
 2be:	11 f4       	brne	.+4      	; 0x2c4 <pinChange+0x232>
		  PORTC |= (1<<PC7);
 2c0:	af 9a       	sbi	0x15, 7	; 21
 2c2:	08 95       	ret
		else if(a == eS_PORTD0)
 2c4:	8e 31       	cpi	r24, 0x1E	; 30
 2c6:	91 05       	cpc	r25, r1
 2c8:	11 f4       	brne	.+4      	; 0x2ce <pinChange+0x23c>
		  PORTD |= (1<<PD0);
 2ca:	90 9a       	sbi	0x12, 0	; 18
 2cc:	08 95       	ret
		else if(a == eS_PORTD1)
 2ce:	8f 31       	cpi	r24, 0x1F	; 31
 2d0:	91 05       	cpc	r25, r1
 2d2:	11 f4       	brne	.+4      	; 0x2d8 <pinChange+0x246>
		  PORTD |= (1<<PD1);
 2d4:	91 9a       	sbi	0x12, 1	; 18
 2d6:	08 95       	ret
		else if(a == eS_PORTD2)
 2d8:	80 32       	cpi	r24, 0x20	; 32
 2da:	91 05       	cpc	r25, r1
 2dc:	11 f4       	brne	.+4      	; 0x2e2 <pinChange+0x250>
		  PORTD |= (1<<PD2);
 2de:	92 9a       	sbi	0x12, 2	; 18
 2e0:	08 95       	ret
		else if(a == eS_PORTD3)
 2e2:	81 32       	cpi	r24, 0x21	; 33
 2e4:	91 05       	cpc	r25, r1
 2e6:	11 f4       	brne	.+4      	; 0x2ec <pinChange+0x25a>
		  PORTD |= (1<<PD3);
 2e8:	93 9a       	sbi	0x12, 3	; 18
 2ea:	08 95       	ret
		else if(a == eS_PORTD4)
 2ec:	82 32       	cpi	r24, 0x22	; 34
 2ee:	91 05       	cpc	r25, r1
 2f0:	11 f4       	brne	.+4      	; 0x2f6 <pinChange+0x264>
		  PORTD |= (1<<PD4);
 2f2:	94 9a       	sbi	0x12, 4	; 18
 2f4:	08 95       	ret
		else if(a == eS_PORTD5)
 2f6:	83 32       	cpi	r24, 0x23	; 35
 2f8:	91 05       	cpc	r25, r1
 2fa:	11 f4       	brne	.+4      	; 0x300 <pinChange+0x26e>
		  PORTD |= (1<<PD5);
 2fc:	95 9a       	sbi	0x12, 5	; 18
 2fe:	08 95       	ret
		else if(a == eS_PORTD6)
 300:	84 32       	cpi	r24, 0x24	; 36
 302:	91 05       	cpc	r25, r1
 304:	11 f4       	brne	.+4      	; 0x30a <pinChange+0x278>
		  PORTD |= (1<<PD6);
 306:	96 9a       	sbi	0x12, 6	; 18
 308:	08 95       	ret
		else if(a == eS_PORTD7)
 30a:	85 97       	sbiw	r24, 0x25	; 37
 30c:	09 f4       	brne	.+2      	; 0x310 <pinChange+0x27e>
		  PORTD |= (1<<PD7);
 30e:	97 9a       	sbi	0x12, 7	; 18
 310:	08 95       	ret

00000312 <Lcd4_Port>:
//End LCD 8 Bit Interfacing Functions
#pragma endregion 
//LCD 4 Bit Interfacing Functions

void Lcd4_Port(char a)
{
 312:	cf 93       	push	r28
 314:	c8 2f       	mov	r28, r24
	if(a & 1)
 316:	80 ff       	sbrs	r24, 0
 318:	07 c0       	rjmp	.+14     	; 0x328 <Lcd4_Port+0x16>
	pinChange(D4,1);
 31a:	61 e0       	ldi	r22, 0x01	; 1
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	82 e2       	ldi	r24, 0x22	; 34
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 326:	06 c0       	rjmp	.+12     	; 0x334 <Lcd4_Port+0x22>
	else
	pinChange(D4,0);
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	82 e2       	ldi	r24, 0x22	; 34
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 2)
 334:	c1 ff       	sbrs	r28, 1
 336:	07 c0       	rjmp	.+14     	; 0x346 <Lcd4_Port+0x34>
	pinChange(D5,1);
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	83 e2       	ldi	r24, 0x23	; 35
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 344:	06 c0       	rjmp	.+12     	; 0x352 <Lcd4_Port+0x40>
	else
	pinChange(D5,0);
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	83 e2       	ldi	r24, 0x23	; 35
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 4)
 352:	c2 ff       	sbrs	r28, 2
 354:	07 c0       	rjmp	.+14     	; 0x364 <Lcd4_Port+0x52>
	pinChange(D6,1);
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	84 e2       	ldi	r24, 0x24	; 36
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 362:	06 c0       	rjmp	.+12     	; 0x370 <Lcd4_Port+0x5e>
	else
	pinChange(D6,0);
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	84 e2       	ldi	r24, 0x24	; 36
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 8)
 370:	c3 ff       	sbrs	r28, 3
 372:	07 c0       	rjmp	.+14     	; 0x382 <Lcd4_Port+0x70>
	pinChange(D7,1);
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	85 e2       	ldi	r24, 0x25	; 37
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 380:	06 c0       	rjmp	.+12     	; 0x38e <Lcd4_Port+0x7c>
	else
	pinChange(D7,0);
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	85 e2       	ldi	r24, 0x25	; 37
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
}
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
 392:	cf 93       	push	r28
 394:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	89 e1       	ldi	r24, 0x19	; 25
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	Lcd4_Port(a);
 3a2:	8c 2f       	mov	r24, r28
 3a4:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
 3a8:	61 e0       	ldi	r22, 0x01	; 1
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	8b e1       	ldi	r24, 0x1B	; 27
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b4:	8f ec       	ldi	r24, 0xCF	; 207
 3b6:	97 e0       	ldi	r25, 0x07	; 7
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <Lcd4_Cmd+0x26>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <Lcd4_Cmd+0x2c>
 3be:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	8b e1       	ldi	r24, 0x1B	; 27
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 3cc:	8f ec       	ldi	r24, 0xCF	; 207
 3ce:	97 e0       	ldi	r25, 0x07	; 7
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <Lcd4_Cmd+0x3e>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <Lcd4_Cmd+0x44>
 3d6:	00 00       	nop
	_delay_ms(1);
}
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(1);
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 3e8:	08 95       	ret

000003ea <Lcd4_Set_Cursor>:
}

void Lcd4_Set_Cursor(char a, char b)
{
 3ea:	cf 93       	push	r28
 3ec:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 1)
 3ee:	81 30       	cpi	r24, 0x01	; 1
 3f0:	59 f4       	brne	.+22     	; 0x408 <Lcd4_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
 3f2:	80 e8       	ldi	r24, 0x80	; 128
 3f4:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
 3f6:	82 95       	swap	r24
 3f8:	8f 70       	andi	r24, 0x0F	; 15
 3fa:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
		Lcd4_Cmd(y);
 3fe:	8c 2f       	mov	r24, r28
 400:	8f 70       	andi	r24, 0x0F	; 15
 402:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 406:	0c c0       	rjmp	.+24     	; 0x420 <Lcd4_Set_Cursor+0x36>
	}
	else if(a == 2)
 408:	82 30       	cpi	r24, 0x02	; 2
 40a:	51 f4       	brne	.+20     	; 0x420 <Lcd4_Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
 40c:	80 ec       	ldi	r24, 0xC0	; 192
 40e:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
 410:	82 95       	swap	r24
 412:	8f 70       	andi	r24, 0x0F	; 15
 414:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
		Lcd4_Cmd(y);
 418:	8c 2f       	mov	r24, r28
 41a:	8f 70       	andi	r24, 0x0F	; 15
 41c:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	}
}
 420:	cf 91       	pop	r28
 422:	08 95       	ret

00000424 <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
 42a:	8f e3       	ldi	r24, 0x3F	; 63
 42c:	9c e9       	ldi	r25, 0x9C	; 156
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <Lcd4_Init+0xa>
 432:	00 c0       	rjmp	.+0      	; 0x434 <Lcd4_Init+0x10>
 434:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
 436:	83 e0       	ldi	r24, 0x03	; 3
 438:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 43c:	8f e0       	ldi	r24, 0x0F	; 15
 43e:	97 e2       	ldi	r25, 0x27	; 39
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <Lcd4_Init+0x1c>
 444:	00 c0       	rjmp	.+0      	; 0x446 <Lcd4_Init+0x22>
 446:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
 448:	83 e0       	ldi	r24, 0x03	; 3
 44a:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 44e:	8f ee       	ldi	r24, 0xEF	; 239
 450:	95 e5       	ldi	r25, 0x55	; 85
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <Lcd4_Init+0x2e>
 456:	00 c0       	rjmp	.+0      	; 0x458 <Lcd4_Init+0x34>
 458:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
 45a:	83 e0       	ldi	r24, 0x03	; 3
 45c:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
 460:	82 e0       	ldi	r24, 0x02	; 2
 462:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
 46c:	88 e0       	ldi	r24, 0x08	; 8
 46e:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
 478:	8c e0       	ldi	r24, 0x0C	; 12
 47a:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
 484:	86 e0       	ldi	r24, 0x06	; 6
 486:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 48a:	08 95       	ret

0000048c <Lcd4_Write_Char>:
}

void Lcd4_Write_Char(char a)
{
 48c:	cf 93       	push	r28
 48e:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
 490:	61 e0       	ldi	r22, 0x01	; 1
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	89 e1       	ldi	r24, 0x19	; 25
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
 49c:	8c 2f       	mov	r24, r28
 49e:	82 95       	swap	r24
 4a0:	8f 70       	andi	r24, 0x0F	; 15
 4a2:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
	pinChange(EN,1);
 4a6:	61 e0       	ldi	r22, 0x01	; 1
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	8b e1       	ldi	r24, 0x1B	; 27
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 4b2:	8f ec       	ldi	r24, 0xCF	; 207
 4b4:	97 e0       	ldi	r25, 0x07	; 7
 4b6:	01 97       	sbiw	r24, 0x01	; 1
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <Lcd4_Write_Char+0x2a>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <Lcd4_Write_Char+0x30>
 4bc:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	8b e1       	ldi	r24, 0x1B	; 27
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 4ca:	8f ec       	ldi	r24, 0xCF	; 207
 4cc:	97 e0       	ldi	r25, 0x07	; 7
 4ce:	01 97       	sbiw	r24, 0x01	; 1
 4d0:	f1 f7       	brne	.-4      	; 0x4ce <Lcd4_Write_Char+0x42>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <Lcd4_Write_Char+0x48>
 4d4:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
 4d6:	8c 2f       	mov	r24, r28
 4d8:	8f 70       	andi	r24, 0x0F	; 15
 4da:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
	pinChange(EN,1);
 4de:	61 e0       	ldi	r22, 0x01	; 1
 4e0:	70 e0       	ldi	r23, 0x00	; 0
 4e2:	8b e1       	ldi	r24, 0x1B	; 27
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 4ea:	8f ec       	ldi	r24, 0xCF	; 207
 4ec:	97 e0       	ldi	r25, 0x07	; 7
 4ee:	01 97       	sbiw	r24, 0x01	; 1
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <Lcd4_Write_Char+0x62>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <Lcd4_Write_Char+0x68>
 4f4:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 4f6:	60 e0       	ldi	r22, 0x00	; 0
 4f8:	70 e0       	ldi	r23, 0x00	; 0
 4fa:	8b e1       	ldi	r24, 0x1B	; 27
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 502:	8f ec       	ldi	r24, 0xCF	; 207
 504:	97 e0       	ldi	r25, 0x07	; 7
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	f1 f7       	brne	.-4      	; 0x506 <Lcd4_Write_Char+0x7a>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <Lcd4_Write_Char+0x80>
 50c:	00 00       	nop
	_delay_ms(1);
}
 50e:	cf 91       	pop	r28
 510:	08 95       	ret

00000512 <Lcd4_Write_String>:

void Lcd4_Write_String(char *a)
{
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
 518:	88 81       	ld	r24, Y
 51a:	88 23       	and	r24, r24
 51c:	31 f0       	breq	.+12     	; 0x52a <Lcd4_Write_String+0x18>
 51e:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_Write_Char(a[i]);
 520:	0e 94 46 02 	call	0x48c	; 0x48c <Lcd4_Write_Char>
}

void Lcd4_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
 524:	89 91       	ld	r24, Y+
 526:	81 11       	cpse	r24, r1
 528:	fb cf       	rjmp	.-10     	; 0x520 <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	08 95       	ret

00000530 <__vector_11>:
const unsigned char Scan_Complete[] = {0xAC, 0x44, 0x88};
bool flag_resumeLeft = false;
bool flag_resumeRight = false;

ISR(USART_RXC_vect)
{
 530:	1f 92       	push	r1
 532:	0f 92       	push	r0
 534:	0f b6       	in	r0, 0x3f	; 63
 536:	0f 92       	push	r0
 538:	11 24       	eor	r1, r1
 53a:	2f 93       	push	r18
 53c:	3f 93       	push	r19
 53e:	4f 93       	push	r20
 540:	5f 93       	push	r21
 542:	6f 93       	push	r22
 544:	7f 93       	push	r23
 546:	8f 93       	push	r24
 548:	9f 93       	push	r25
 54a:	af 93       	push	r26
 54c:	bf 93       	push	r27
 54e:	ef 93       	push	r30
 550:	ff 93       	push	r31
	cli();
 552:	f8 94       	cli
	Ret = Check_MSG();
 554:	0e 94 b5 05 	call	0xb6a	; 0xb6a <Check_MSG>
 558:	80 93 ec 00 	sts	0x00EC, r24
 55c:	8f e5       	ldi	r24, 0x5F	; 95
 55e:	9a ee       	ldi	r25, 0xEA	; 234
 560:	01 97       	sbiw	r24, 0x01	; 1
 562:	f1 f7       	brne	.-4      	; 0x560 <__vector_11+0x30>
 564:	00 c0       	rjmp	.+0      	; 0x566 <__vector_11+0x36>
 566:	00 00       	nop
	_delay_ms(30);
	if (Ret == 0x11)
 568:	80 91 ec 00 	lds	r24, 0x00EC
 56c:	81 31       	cpi	r24, 0x11	; 17
 56e:	29 f4       	brne	.+10     	; 0x57a <__vector_11+0x4a>
	{
		//Lcd4_Clear();
		//Lcd4_Set_Cursor(1,0);
		//Lcd4_Write_String("RIGHT");
		//_delay_ms(2000);
		STOP_command = 1;
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	80 93 e8 00 	sts	0x00E8, r24
		Ret = 0;
 576:	10 92 ec 00 	sts	0x00EC, r1
	}
	//char ReceivedByte;
	//ReceivedByte = UDR;
	//UDR = ReceivedByte;
	sei();
 57a:	78 94       	sei
}
 57c:	ff 91       	pop	r31
 57e:	ef 91       	pop	r30
 580:	bf 91       	pop	r27
 582:	af 91       	pop	r26
 584:	9f 91       	pop	r25
 586:	8f 91       	pop	r24
 588:	7f 91       	pop	r23
 58a:	6f 91       	pop	r22
 58c:	5f 91       	pop	r21
 58e:	4f 91       	pop	r20
 590:	3f 91       	pop	r19
 592:	2f 91       	pop	r18
 594:	0f 90       	pop	r0
 596:	0f be       	out	0x3f, r0	; 63
 598:	0f 90       	pop	r0
 59a:	1f 90       	pop	r1
 59c:	18 95       	reti

0000059e <__vector_8>:
ISR(TIMER1_OVF_vect)
{
 59e:	1f 92       	push	r1
 5a0:	0f 92       	push	r0
 5a2:	0f b6       	in	r0, 0x3f	; 63
 5a4:	0f 92       	push	r0
 5a6:	11 24       	eor	r1, r1
 5a8:	8f 93       	push	r24
	overflow++;
 5aa:	80 91 eb 00 	lds	r24, 0x00EB
 5ae:	8f 5f       	subi	r24, 0xFF	; 255
 5b0:	80 93 eb 00 	sts	0x00EB, r24
	cli();
 5b4:	f8 94       	cli
	if (overflow >= 5) // NOTE: '>=' used instead of '=='
 5b6:	80 91 eb 00 	lds	r24, 0x00EB
 5ba:	85 30       	cpi	r24, 0x05	; 5
 5bc:	a0 f0       	brcs	.+40     	; 0x5e6 <__vector_8+0x48>
	{
		if (!(bit_is_clear(PINA, PA2)))//Right
 5be:	ca 9b       	sbis	0x19, 2	; 25
 5c0:	07 c0       	rjmp	.+14     	; 0x5d0 <__vector_8+0x32>
		{
			//Lcd4_Clear();
			//Lcd4_Set_Cursor(1,0);
			//Lcd4_Write_String("RIGHT");
			Limit_Right = 1;
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	80 93 ea 00 	sts	0x00EA, r24
			overflow = 0;
 5c8:	10 92 eb 00 	sts	0x00EB, r1
			sei();
 5cc:	78 94       	sei
			return;
 5ce:	0c c0       	rjmp	.+24     	; 0x5e8 <__vector_8+0x4a>
		}
		else if (!(bit_is_clear(PINA, PA1)))//Left
 5d0:	c9 9b       	sbis	0x19, 1	; 25
 5d2:	07 c0       	rjmp	.+14     	; 0x5e2 <__vector_8+0x44>
		{
			//Lcd4_Clear();
			//Lcd4_Set_Cursor(1,0);
			//Lcd4_Write_String("LEFT");
			Limit_Left = 1;
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	80 93 e9 00 	sts	0x00E9, r24
			overflow = 0;
 5da:	10 92 eb 00 	sts	0x00EB, r1
			sei();
 5de:	78 94       	sei
			return;
 5e0:	03 c0       	rjmp	.+6      	; 0x5e8 <__vector_8+0x4a>
		}
		overflow = 0;
 5e2:	10 92 eb 00 	sts	0x00EB, r1
	}
	sei();
 5e6:	78 94       	sei
}
 5e8:	8f 91       	pop	r24
 5ea:	0f 90       	pop	r0
 5ec:	0f be       	out	0x3f, r0	; 63
 5ee:	0f 90       	pop	r0
 5f0:	1f 90       	pop	r1
 5f2:	18 95       	reti

000005f4 <SetPWMOutput_Left>:
void SetPWMOutput_Left()
{
	OCR0=240;//duty;//0-255
 5f4:	80 ef       	ldi	r24, 0xF0	; 240
 5f6:	8c bf       	out	0x3c, r24	; 60
	DDRB = 0xFF;
 5f8:	8f ef       	ldi	r24, 0xFF	; 255
 5fa:	87 bb       	out	0x17, r24	; 23
	//PORTB = (0<<PB0);//= 0b00000000;
	PORTB = ((0<<PB0) | (1<<PB1));
 5fc:	82 e0       	ldi	r24, 0x02	; 2
 5fe:	88 bb       	out	0x18, r24	; 24
 600:	08 95       	ret

00000602 <SetPWMOutput_Lefttotal>:
}
void SetPWMOutput_Lefttotal()
{
	OCR0=255;//duty;//0-255
 602:	8f ef       	ldi	r24, 0xFF	; 255
 604:	8c bf       	out	0x3c, r24	; 60
	DDRB = 0xFF;
 606:	87 bb       	out	0x17, r24	; 23
	//PORTB = (0<<PB0);//= 0b00000000;
	PORTB = ((0<<PB0) | (1<<PB1));
 608:	82 e0       	ldi	r24, 0x02	; 2
 60a:	88 bb       	out	0x18, r24	; 24
 60c:	08 95       	ret

0000060e <SetPWMOutput_Right>:
}
void SetPWMOutput_Right()
{
	OCR0 = 240;//100//duty;//0-255
 60e:	80 ef       	ldi	r24, 0xF0	; 240
 610:	8c bf       	out	0x3c, r24	; 60
	DDRB = 0xFF;
 612:	8f ef       	ldi	r24, 0xFF	; 255
 614:	87 bb       	out	0x17, r24	; 23
	//PORTB |= (1<<PB0);//= 0b00000000;
	PORTB = ((0<<PB1) | (1<<PB0));
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	88 bb       	out	0x18, r24	; 24
 61a:	08 95       	ret

0000061c <SetPWMOutput_Righttotal>:
}
void SetPWMOutput_Righttotal()
{
	OCR0 = 255;//100//duty;//0-255
 61c:	8f ef       	ldi	r24, 0xFF	; 255
 61e:	8c bf       	out	0x3c, r24	; 60
	DDRB = 0xFF;
 620:	87 bb       	out	0x17, r24	; 23
	//PORTB |= (1<<PB0);//= 0b00000000;
	PORTB = ((0<<PB1) | (1<<PB0));
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	88 bb       	out	0x18, r24	; 24
 626:	08 95       	ret

00000628 <Init>:
	}
}

void Init()
{
	DDRD = 0xFF;//display
 628:	8f ef       	ldi	r24, 0xFF	; 255
 62a:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;
 62c:	84 bb       	out	0x14, r24	; 20
	
	DDRA = 0xFF;//limits
 62e:	8a bb       	out	0x1a, r24	; 26
	PORTA =0x00;
 630:	1b ba       	out	0x1b, r1	; 27
	
	TCCR0|=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00);//pwm
 632:	93 b7       	in	r25, 0x33	; 51
 634:	99 66       	ori	r25, 0x69	; 105
 636:	93 bf       	out	0x33, r25	; 51
	//DDRB|=(1<<PB3);
	DDRB = 0xFF;
 638:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
 63a:	18 ba       	out	0x18, r1	; 24
 63c:	08 95       	ret

0000063e <InitTimer1>:
	//DDRB = (1<<PB0) | (0<<PB4);// Cell Right
	//PORTB =(1<<PB0) | (0<<PB4);
}
void InitTimer1()
{
	TCCR1B |= (1 << CS10);// set up timer with prescaler = 8
 63e:	8e b5       	in	r24, 0x2e	; 46
 640:	81 60       	ori	r24, 0x01	; 1
 642:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;            // initialize counter
 644:	1d bc       	out	0x2d, r1	; 45
 646:	1c bc       	out	0x2c, r1	; 44
	TIMSK |= (1 << TOIE1);// enable overflow interrupt
 648:	89 b7       	in	r24, 0x39	; 57
 64a:	84 60       	ori	r24, 0x04	; 4
 64c:	89 bf       	out	0x39, r24	; 57
 64e:	08 95       	ret

00000650 <USART_Init>:
	//overflow = 0;         // initialize overflow counter variable
}

void USART_Init( unsigned int ubrr)
{
	UBRRH = (unsigned char)(ubrr>>8);       // Set baud rate
 650:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)ubrr;            // Set baud rate
 652:	89 b9       	out	0x09, r24	; 9
	UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
 654:	88 e9       	ldi	r24, 0x98	; 152
 656:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1); // Use 8-bit character sizes
 658:	86 e8       	ldi	r24, 0x86	; 134
 65a:	80 bd       	out	0x20, r24	; 32
	
	//set_sleep_mode(SLEEP_MODE_IDLE);
	sei();
 65c:	78 94       	sei
 65e:	08 95       	ret

00000660 <USART_Transmit>:
}

void USART_Transmit( unsigned char data )
{
	while ( !( UCSRA & (1<<UDRE)) );        // Wait for empty transmit buffer
 660:	5d 9b       	sbis	0x0b, 5	; 11
 662:	fe cf       	rjmp	.-4      	; 0x660 <USART_Transmit>
	UDR = data;                             // Put data into buffer, sends the data
 664:	8c b9       	out	0x0c, r24	; 12
 666:	08 95       	ret

00000668 <USART_Receive>:
}

unsigned char USART_Receive( void )
{
	while ( !(UCSRA & (1<<RXC)) );          // Wait for data to be received
 668:	5f 9b       	sbis	0x0b, 7	; 11
 66a:	fe cf       	rjmp	.-4      	; 0x668 <USART_Receive>
	return UDR;                             // Get and return received data from buffer
 66c:	8c b1       	in	r24, 0x0c	; 12
}
 66e:	08 95       	ret

00000670 <Init_position>:

void Init_position()
{
	Lcd4_Clear();
 670:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
	Lcd4_Set_Cursor(1,0);
 674:	60 e0       	ldi	r22, 0x00	; 0
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
	Lcd4_Write_String("Init Position");
 67c:	80 e6       	ldi	r24, 0x60	; 96
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	0e 94 89 02 	call	0x512	; 0x512 <Lcd4_Write_String>
	
	while (Limit_Right == 0)
 684:	80 91 ea 00 	lds	r24, 0x00EA
 688:	81 11       	cpse	r24, r1
 68a:	10 c0       	rjmp	.+32     	; 0x6ac <Init_position+0x3c>
	{
		Lcd4_Clear();
 68c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
		Lcd4_Set_Cursor(1,0);
 690:	60 e0       	ldi	r22, 0x00	; 0
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
		Lcd4_Write_String("Moving left");
 698:	8e e6       	ldi	r24, 0x6E	; 110
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	0e 94 89 02 	call	0x512	; 0x512 <Lcd4_Write_String>
		SetPWMOutput_Right();
 6a0:	0e 94 07 03 	call	0x60e	; 0x60e <SetPWMOutput_Right>
{
	Lcd4_Clear();
	Lcd4_Set_Cursor(1,0);
	Lcd4_Write_String("Init Position");
	
	while (Limit_Right == 0)
 6a4:	80 91 ea 00 	lds	r24, 0x00EA
 6a8:	88 23       	and	r24, r24
 6aa:	81 f3       	breq	.-32     	; 0x68c <Init_position+0x1c>
		Lcd4_Clear();
		Lcd4_Set_Cursor(1,0);
		Lcd4_Write_String("Moving left");
		SetPWMOutput_Right();
	}
	OCR0 = 0;
 6ac:	1c be       	out	0x3c, r1	; 60
	//Limit_Right = 0;
	Lcd4_Clear();
 6ae:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
	Lcd4_Set_Cursor(1,0);
 6b2:	60 e0       	ldi	r22, 0x00	; 0
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
	Lcd4_Write_String("Moving right");
 6ba:	8a e7       	ldi	r24, 0x7A	; 122
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	0e 94 89 02 	call	0x512	; 0x512 <Lcd4_Write_String>
	SetPWMOutput_Left();
 6c2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <SetPWMOutput_Left>
 6c6:	2f ef       	ldi	r18, 0xFF	; 255
 6c8:	8c e4       	ldi	r24, 0x4C	; 76
 6ca:	98 e0       	ldi	r25, 0x08	; 8
 6cc:	21 50       	subi	r18, 0x01	; 1
 6ce:	80 40       	sbci	r24, 0x00	; 0
 6d0:	90 40       	sbci	r25, 0x00	; 0
 6d2:	e1 f7       	brne	.-8      	; 0x6cc <Init_position+0x5c>
 6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <Init_position+0x66>
 6d6:	00 00       	nop
	_delay_ms(340);
	OCR0 = 0;
 6d8:	1c be       	out	0x3c, r1	; 60
 6da:	08 95       	ret

000006dc <main>:
	PORTB = ((0<<PB1) | (1<<PB0));
}

int main(void)
{
	Init();
 6dc:	0e 94 14 03 	call	0x628	; 0x628 <Init>
	InitTimer1();
 6e0:	0e 94 1f 03 	call	0x63e	; 0x63e <InitTimer1>
	USART_Init ( MYUBRR );
 6e4:	8c e0       	ldi	r24, 0x0C	; 12
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	0e 94 28 03 	call	0x650	; 0x650 <USART_Init>
	Lcd4_Init();
 6ec:	0e 94 12 02 	call	0x424	; 0x424 <Lcd4_Init>
	
	Init_position();
 6f0:	0e 94 38 03 	call	0x670	; 0x670 <Init_position>
 6f4:	2f e7       	ldi	r18, 0x7F	; 127
 6f6:	88 e3       	ldi	r24, 0x38	; 56
 6f8:	91 e0       	ldi	r25, 0x01	; 1
 6fa:	21 50       	subi	r18, 0x01	; 1
 6fc:	80 40       	sbci	r24, 0x00	; 0
 6fe:	90 40       	sbci	r25, 0x00	; 0
 700:	e1 f7       	brne	.-8      	; 0x6fa <main+0x1e>
 702:	00 c0       	rjmp	.+0      	; 0x704 <main+0x28>
 704:	00 00       	nop
	
	_delay_ms(50);
	Lcd4_Clear();
 706:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
			Lcd4_Clear();
			Lcd4_Set_Cursor(1,0);
			Lcd4_Write_String("Right");
			while (Limit_Left == 0 && STOP_command == 0)
			{
				OCR0 = 255;
 70a:	cf ef       	ldi	r28, 0xFF	; 255
				PORTB = ((0<<PB0) | (0<<PB1));
				Limit_Right = 0;
				if (STOP_command == 1)
				{
					STOP_command = 0;
					Ret = 22;
 70c:	d6 e1       	ldi	r29, 0x16	; 22
	_delay_ms(50);
	Lcd4_Clear();
	
	while(1)
	{
		Lcd4_Set_Cursor(1,0);
 70e:	60 e0       	ldi	r22, 0x00	; 0
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
		Lcd4_Write_String("DR. Vision");
 716:	87 e8       	ldi	r24, 0x87	; 135
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	0e 94 89 02 	call	0x512	; 0x512 <Lcd4_Write_String>
		Lcd4_Set_Cursor(2,0);
 71e:	60 e0       	ldi	r22, 0x00	; 0
 720:	82 e0       	ldi	r24, 0x02	; 2
 722:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
		Lcd4_Write_String("READY");
 726:	82 e9       	ldi	r24, 0x92	; 146
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	0e 94 89 02 	call	0x512	; 0x512 <Lcd4_Write_String>
		if (Ret == 0x11)
 72e:	80 91 ec 00 	lds	r24, 0x00EC
 732:	81 31       	cpi	r24, 0x11	; 17
 734:	81 f4       	brne	.+32     	; 0x756 <main+0x7a>
		{
			Lcd4_Clear();
 736:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
			Lcd4_Set_Cursor(1,0);
 73a:	60 e0       	ldi	r22, 0x00	; 0
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
			Lcd4_Write_String("STOP");
 742:	88 e9       	ldi	r24, 0x98	; 152
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	0e 94 89 02 	call	0x512	; 0x512 <Lcd4_Write_String>
			OCR0 = 0;
 74a:	1c be       	out	0x3c, r1	; 60
			//PORTB = (0<<PB0);
			PORTB = ((0<<PB0) | (0<<PB1));
 74c:	18 ba       	out	0x18, r1	; 24
			Ret = 0;
 74e:	10 92 ec 00 	sts	0x00EC, r1
				flag_resumeRight = false;
				continue;
			}
			//Ret = 0;
		}
		if (Ret == 0x88)//left
 752:	80 e0       	ldi	r24, 0x00	; 0
 754:	05 c1       	rjmp	.+522    	; 0x960 <main+0x284>
			OCR0 = 0;
			//PORTB = (0<<PB0);
			PORTB = ((0<<PB0) | (0<<PB1));
			Ret = 0;
		}
		if (Ret == 0x22)
 756:	82 32       	cpi	r24, 0x22	; 34
 758:	09 f0       	breq	.+2      	; 0x75c <main+0x80>
 75a:	ee c0       	rjmp	.+476    	; 0x938 <main+0x25c>
		{
			Lcd4_Clear();
 75c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
			Lcd4_Set_Cursor(1,0);
 760:	60 e0       	ldi	r22, 0x00	; 0
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
			Lcd4_Write_String("Scanning...");
 768:	8d e9       	ldi	r24, 0x9D	; 157
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	0e 94 89 02 	call	0x512	; 0x512 <Lcd4_Write_String>
			if ((Limit_Right == 1) | (flag_resumeLeft == true))
 770:	90 91 ea 00 	lds	r25, 0x00EA
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	91 30       	cpi	r25, 0x01	; 1
 778:	09 f0       	breq	.+2      	; 0x77c <main+0xa0>
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	81 11       	cpse	r24, r1
 77e:	05 c0       	rjmp	.+10     	; 0x78a <main+0xae>
 780:	80 91 e7 00 	lds	r24, 0x00E7
 784:	88 23       	and	r24, r24
 786:	09 f4       	brne	.+2      	; 0x78a <main+0xae>
 788:	66 c0       	rjmp	.+204    	; 0x856 <main+0x17a>
			{
				while (Limit_Left == 0 && STOP_command == 0)
 78a:	80 91 e9 00 	lds	r24, 0x00E9
 78e:	81 11       	cpse	r24, r1
 790:	0e c0       	rjmp	.+28     	; 0x7ae <main+0xd2>
 792:	80 91 e8 00 	lds	r24, 0x00E8
 796:	81 11       	cpse	r24, r1
 798:	0a c0       	rjmp	.+20     	; 0x7ae <main+0xd2>
				{
					SetPWMOutput_Left();
 79a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <SetPWMOutput_Left>
			Lcd4_Clear();
			Lcd4_Set_Cursor(1,0);
			Lcd4_Write_String("Scanning...");
			if ((Limit_Right == 1) | (flag_resumeLeft == true))
			{
				while (Limit_Left == 0 && STOP_command == 0)
 79e:	80 91 e9 00 	lds	r24, 0x00E9
 7a2:	81 11       	cpse	r24, r1
 7a4:	04 c0       	rjmp	.+8      	; 0x7ae <main+0xd2>
 7a6:	80 91 e8 00 	lds	r24, 0x00E8
 7aa:	88 23       	and	r24, r24
 7ac:	b1 f3       	breq	.-20     	; 0x79a <main+0xbe>
				{
					SetPWMOutput_Left();
				}
				OCR0 = 0;
 7ae:	1c be       	out	0x3c, r1	; 60
				if (STOP_command == 0)
 7b0:	80 91 e8 00 	lds	r24, 0x00E8
 7b4:	81 11       	cpse	r24, r1
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <main+0xe0>
				{
					SetPWMOutput_Right();
 7b8:	0e 94 07 03 	call	0x60e	; 0x60e <SetPWMOutput_Right>
 7bc:	2f ef       	ldi	r18, 0xFF	; 255
 7be:	82 e5       	ldi	r24, 0x52	; 82
 7c0:	97 e0       	ldi	r25, 0x07	; 7
 7c2:	21 50       	subi	r18, 0x01	; 1
 7c4:	80 40       	sbci	r24, 0x00	; 0
 7c6:	90 40       	sbci	r25, 0x00	; 0
 7c8:	e1 f7       	brne	.-8      	; 0x7c2 <main+0xe6>
 7ca:	00 c0       	rjmp	.+0      	; 0x7cc <main+0xf0>
 7cc:	00 00       	nop
				}
				_delay_ms(300);
				OCR0 = 0;        //stop
 7ce:	1c be       	out	0x3c, r1	; 60
				//PORTB = (0<<PB0);//stop
				PORTB = ((0<<PB0) | (0<<PB1));
 7d0:	18 ba       	out	0x18, r1	; 24
				Limit_Right = 0;
 7d2:	10 92 ea 00 	sts	0x00EA, r1
				if (STOP_command == 1)
 7d6:	80 91 e8 00 	lds	r24, 0x00E8
 7da:	81 30       	cpi	r24, 0x01	; 1
 7dc:	39 f4       	brne	.+14     	; 0x7ec <main+0x110>
				{
					STOP_command = 0;
 7de:	10 92 e8 00 	sts	0x00E8, r1
					Ret = 22;
 7e2:	d0 93 ec 00 	sts	0x00EC, r29
					flag_resumeLeft = true;
 7e6:	80 93 e7 00 	sts	0x00E7, r24
					continue;	
 7ea:	91 cf       	rjmp	.-222    	; 0x70e <main+0x32>
				}
				
				Lcd4_Clear();
 7ec:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
				Lcd4_Set_Cursor(1,0);
 7f0:	60 e0       	ldi	r22, 0x00	; 0
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
				Lcd4_Write_String("Scan complete");
 7f8:	89 ea       	ldi	r24, 0xA9	; 169
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	0e 94 89 02 	call	0x512	; 0x512 <Lcd4_Write_String>
 800:	2f ef       	ldi	r18, 0xFF	; 255
 802:	83 ed       	ldi	r24, 0xD3	; 211
 804:	90 e3       	ldi	r25, 0x30	; 48
 806:	21 50       	subi	r18, 0x01	; 1
 808:	80 40       	sbci	r24, 0x00	; 0
 80a:	90 40       	sbci	r25, 0x00	; 0
 80c:	e1 f7       	brne	.-8      	; 0x806 <main+0x12a>
 80e:	00 c0       	rjmp	.+0      	; 0x810 <main+0x134>
 810:	00 00       	nop
				_delay_ms(2000);
				for (int i = 0; i < 3; i++)
				{
					USART_Transmit(Scan_Complete[i]);
 812:	8c ea       	ldi	r24, 0xAC	; 172
 814:	0e 94 30 03 	call	0x660	; 0x660 <USART_Transmit>
 818:	8f e5       	ldi	r24, 0x5F	; 95
 81a:	9a ee       	ldi	r25, 0xEA	; 234
 81c:	01 97       	sbiw	r24, 0x01	; 1
 81e:	f1 f7       	brne	.-4      	; 0x81c <main+0x140>
 820:	00 c0       	rjmp	.+0      	; 0x822 <main+0x146>
 822:	00 00       	nop
 824:	84 e4       	ldi	r24, 0x44	; 68
 826:	0e 94 30 03 	call	0x660	; 0x660 <USART_Transmit>
 82a:	8f e5       	ldi	r24, 0x5F	; 95
 82c:	9a ee       	ldi	r25, 0xEA	; 234
 82e:	01 97       	sbiw	r24, 0x01	; 1
 830:	f1 f7       	brne	.-4      	; 0x82e <main+0x152>
 832:	00 c0       	rjmp	.+0      	; 0x834 <main+0x158>
 834:	00 00       	nop
 836:	88 e8       	ldi	r24, 0x88	; 136
 838:	0e 94 30 03 	call	0x660	; 0x660 <USART_Transmit>
 83c:	8f e5       	ldi	r24, 0x5F	; 95
 83e:	9a ee       	ldi	r25, 0xEA	; 234
 840:	01 97       	sbiw	r24, 0x01	; 1
 842:	f1 f7       	brne	.-4      	; 0x840 <main+0x164>
 844:	00 c0       	rjmp	.+0      	; 0x846 <main+0x16a>
 846:	00 00       	nop
					_delay_ms(30);
				}
				Lcd4_Clear();
 848:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
				Ret = 0;
 84c:	10 92 ec 00 	sts	0x00EC, r1
				flag_resumeLeft = false;
 850:	10 92 e7 00 	sts	0x00E7, r1
				continue;
 854:	5c cf       	rjmp	.-328    	; 0x70e <main+0x32>
			}
			else if ((Limit_Left == 1) | (flag_resumeRight == true))
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	20 91 e9 00 	lds	r18, 0x00E9
 85c:	21 30       	cpi	r18, 0x01	; 1
 85e:	09 f0       	breq	.+2      	; 0x862 <main+0x186>
 860:	80 e0       	ldi	r24, 0x00	; 0
 862:	81 11       	cpse	r24, r1
 864:	05 c0       	rjmp	.+10     	; 0x870 <main+0x194>
 866:	80 91 e6 00 	lds	r24, 0x00E6
 86a:	88 23       	and	r24, r24
 86c:	09 f4       	brne	.+2      	; 0x870 <main+0x194>
 86e:	64 c0       	rjmp	.+200    	; 0x938 <main+0x25c>
			{
				while (Limit_Right == 0 && STOP_command == 0)
 870:	91 11       	cpse	r25, r1
 872:	0e c0       	rjmp	.+28     	; 0x890 <main+0x1b4>
 874:	80 91 e8 00 	lds	r24, 0x00E8
 878:	81 11       	cpse	r24, r1
 87a:	0a c0       	rjmp	.+20     	; 0x890 <main+0x1b4>
				{
					SetPWMOutput_Right();
 87c:	0e 94 07 03 	call	0x60e	; 0x60e <SetPWMOutput_Right>
				flag_resumeLeft = false;
				continue;
			}
			else if ((Limit_Left == 1) | (flag_resumeRight == true))
			{
				while (Limit_Right == 0 && STOP_command == 0)
 880:	80 91 ea 00 	lds	r24, 0x00EA
 884:	81 11       	cpse	r24, r1
 886:	04 c0       	rjmp	.+8      	; 0x890 <main+0x1b4>
 888:	80 91 e8 00 	lds	r24, 0x00E8
 88c:	88 23       	and	r24, r24
 88e:	b1 f3       	breq	.-20     	; 0x87c <main+0x1a0>
				{
					SetPWMOutput_Right();
				}
				OCR0 = 0;
 890:	1c be       	out	0x3c, r1	; 60
				if (STOP_command == 0)
 892:	80 91 e8 00 	lds	r24, 0x00E8
 896:	81 11       	cpse	r24, r1
 898:	02 c0       	rjmp	.+4      	; 0x89e <main+0x1c2>
				{
					SetPWMOutput_Left();
 89a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <SetPWMOutput_Left>
 89e:	9f ef       	ldi	r25, 0xFF	; 255
 8a0:	22 e5       	ldi	r18, 0x52	; 82
 8a2:	87 e0       	ldi	r24, 0x07	; 7
 8a4:	91 50       	subi	r25, 0x01	; 1
 8a6:	20 40       	sbci	r18, 0x00	; 0
 8a8:	80 40       	sbci	r24, 0x00	; 0
 8aa:	e1 f7       	brne	.-8      	; 0x8a4 <main+0x1c8>
 8ac:	00 c0       	rjmp	.+0      	; 0x8ae <main+0x1d2>
 8ae:	00 00       	nop
				}
				_delay_ms(300);
				OCR0 = 0;        //stop
 8b0:	1c be       	out	0x3c, r1	; 60
				//PORTB = (0<<PB0);//stop
				PORTB = ((0<<PB0) | (0<<PB1));
 8b2:	18 ba       	out	0x18, r1	; 24
				Limit_Left = 0;
 8b4:	10 92 e9 00 	sts	0x00E9, r1
				if (STOP_command == 1)
 8b8:	80 91 e8 00 	lds	r24, 0x00E8
 8bc:	81 30       	cpi	r24, 0x01	; 1
 8be:	39 f4       	brne	.+14     	; 0x8ce <main+0x1f2>
				{
					STOP_command = 0;
 8c0:	10 92 e8 00 	sts	0x00E8, r1
					Ret = 22;
 8c4:	d0 93 ec 00 	sts	0x00EC, r29
					flag_resumeRight = true;
 8c8:	80 93 e6 00 	sts	0x00E6, r24
					continue;
 8cc:	20 cf       	rjmp	.-448    	; 0x70e <main+0x32>
				}
				Lcd4_Clear();
 8ce:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
				Lcd4_Set_Cursor(1,0);
 8d2:	60 e0       	ldi	r22, 0x00	; 0
 8d4:	81 e0       	ldi	r24, 0x01	; 1
 8d6:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
				Lcd4_Write_String("Scan complete");
 8da:	89 ea       	ldi	r24, 0xA9	; 169
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	0e 94 89 02 	call	0x512	; 0x512 <Lcd4_Write_String>
 8e2:	9f ef       	ldi	r25, 0xFF	; 255
 8e4:	23 ed       	ldi	r18, 0xD3	; 211
 8e6:	80 e3       	ldi	r24, 0x30	; 48
 8e8:	91 50       	subi	r25, 0x01	; 1
 8ea:	20 40       	sbci	r18, 0x00	; 0
 8ec:	80 40       	sbci	r24, 0x00	; 0
 8ee:	e1 f7       	brne	.-8      	; 0x8e8 <main+0x20c>
 8f0:	00 c0       	rjmp	.+0      	; 0x8f2 <main+0x216>
 8f2:	00 00       	nop
				_delay_ms(2000);
				for (int i = 0; i < 3; i++)
				{
					USART_Transmit(Scan_Complete[i]);
 8f4:	8c ea       	ldi	r24, 0xAC	; 172
 8f6:	0e 94 30 03 	call	0x660	; 0x660 <USART_Transmit>
 8fa:	8f e5       	ldi	r24, 0x5F	; 95
 8fc:	9a ee       	ldi	r25, 0xEA	; 234
 8fe:	01 97       	sbiw	r24, 0x01	; 1
 900:	f1 f7       	brne	.-4      	; 0x8fe <main+0x222>
 902:	00 c0       	rjmp	.+0      	; 0x904 <main+0x228>
 904:	00 00       	nop
 906:	84 e4       	ldi	r24, 0x44	; 68
 908:	0e 94 30 03 	call	0x660	; 0x660 <USART_Transmit>
 90c:	8f e5       	ldi	r24, 0x5F	; 95
 90e:	9a ee       	ldi	r25, 0xEA	; 234
 910:	01 97       	sbiw	r24, 0x01	; 1
 912:	f1 f7       	brne	.-4      	; 0x910 <main+0x234>
 914:	00 c0       	rjmp	.+0      	; 0x916 <main+0x23a>
 916:	00 00       	nop
 918:	88 e8       	ldi	r24, 0x88	; 136
 91a:	0e 94 30 03 	call	0x660	; 0x660 <USART_Transmit>
 91e:	8f e5       	ldi	r24, 0x5F	; 95
 920:	9a ee       	ldi	r25, 0xEA	; 234
 922:	01 97       	sbiw	r24, 0x01	; 1
 924:	f1 f7       	brne	.-4      	; 0x922 <main+0x246>
 926:	00 c0       	rjmp	.+0      	; 0x928 <main+0x24c>
 928:	00 00       	nop
					_delay_ms(30);
				}
				Lcd4_Clear();
 92a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
				Ret = 0;
 92e:	10 92 ec 00 	sts	0x00EC, r1
				flag_resumeRight = false;
 932:	10 92 e6 00 	sts	0x00E6, r1
				continue;
 936:	eb ce       	rjmp	.-554    	; 0x70e <main+0x32>
			}
			//Ret = 0;
		}
		if (Ret == 0x88)//left
 938:	80 91 ec 00 	lds	r24, 0x00EC
 93c:	88 38       	cpi	r24, 0x88	; 136
 93e:	81 f4       	brne	.+32     	; 0x960 <main+0x284>
		{
			SetPWMOutput_Left();
 940:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <SetPWMOutput_Left>
 944:	9f e7       	ldi	r25, 0x7F	; 127
 946:	27 e9       	ldi	r18, 0x97	; 151
 948:	86 e0       	ldi	r24, 0x06	; 6
 94a:	91 50       	subi	r25, 0x01	; 1
 94c:	20 40       	sbci	r18, 0x00	; 0
 94e:	80 40       	sbci	r24, 0x00	; 0
 950:	e1 f7       	brne	.-8      	; 0x94a <main+0x26e>
 952:	00 c0       	rjmp	.+0      	; 0x954 <main+0x278>
 954:	00 00       	nop
			_delay_ms(270);
			OCR0 = 0;        //stop
 956:	1c be       	out	0x3c, r1	; 60
			//PORTB = (0<<PB0);//stop
			PORTB = ((0<<PB0) | (0<<PB1));
 958:	18 ba       	out	0x18, r1	; 24
			Ret = 0;
 95a:	10 92 ec 00 	sts	0x00EC, r1
 95e:	23 c0       	rjmp	.+70     	; 0x9a6 <main+0x2ca>
		}
		if (Ret == 0x99)//right
 960:	89 39       	cpi	r24, 0x99	; 153
 962:	81 f4       	brne	.+32     	; 0x984 <main+0x2a8>
		{
			SetPWMOutput_Right();
 964:	0e 94 07 03 	call	0x60e	; 0x60e <SetPWMOutput_Right>
 968:	9f e7       	ldi	r25, 0x7F	; 127
 96a:	27 e9       	ldi	r18, 0x97	; 151
 96c:	86 e0       	ldi	r24, 0x06	; 6
 96e:	91 50       	subi	r25, 0x01	; 1
 970:	20 40       	sbci	r18, 0x00	; 0
 972:	80 40       	sbci	r24, 0x00	; 0
 974:	e1 f7       	brne	.-8      	; 0x96e <main+0x292>
 976:	00 c0       	rjmp	.+0      	; 0x978 <main+0x29c>
 978:	00 00       	nop
			_delay_ms(270);
			OCR0 = 0;        //stop
 97a:	1c be       	out	0x3c, r1	; 60
			//PORTB = (0<<PB0);//stop
			PORTB = ((0<<PB0) | (0<<PB1));
 97c:	18 ba       	out	0x18, r1	; 24
			Ret = 0;
 97e:	10 92 ec 00 	sts	0x00EC, r1
 982:	c5 ce       	rjmp	.-630    	; 0x70e <main+0x32>
		}
		if (Ret == 0xFF)
 984:	80 91 ec 00 	lds	r24, 0x00EC
 988:	8f 3f       	cpi	r24, 0xFF	; 255
 98a:	69 f4       	brne	.+26     	; 0x9a6 <main+0x2ca>
		{
			Lcd4_Clear();
 98c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
			Lcd4_Set_Cursor(1,0);
 990:	60 e0       	ldi	r22, 0x00	; 0
 992:	81 e0       	ldi	r24, 0x01	; 1
 994:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
			Lcd4_Write_String("ERROR");
 998:	87 eb       	ldi	r24, 0xB7	; 183
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	0e 94 89 02 	call	0x512	; 0x512 <Lcd4_Write_String>
			Ret = 0;
 9a0:	10 92 ec 00 	sts	0x00EC, r1
 9a4:	b4 ce       	rjmp	.-664    	; 0x70e <main+0x32>
		}
		if (Ret == 0x66)  // total left
 9a6:	80 91 ec 00 	lds	r24, 0x00EC
 9aa:	86 36       	cpi	r24, 0x66	; 102
 9ac:	09 f0       	breq	.+2      	; 0x9b0 <main+0x2d4>
 9ae:	6d c0       	rjmp	.+218    	; 0xa8a <main+0x3ae>
		{
			Lcd4_Clear();
 9b0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
			Lcd4_Set_Cursor(1,0);
 9b4:	60 e0       	ldi	r22, 0x00	; 0
 9b6:	81 e0       	ldi	r24, 0x01	; 1
 9b8:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
			Lcd4_Write_String("Left");
 9bc:	8d eb       	ldi	r24, 0xBD	; 189
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	0e 94 89 02 	call	0x512	; 0x512 <Lcd4_Write_String>
			while (Limit_Right == 0 && STOP_command == 0)
 9c4:	80 91 ea 00 	lds	r24, 0x00EA
 9c8:	81 11       	cpse	r24, r1
 9ca:	0f c0       	rjmp	.+30     	; 0x9ea <main+0x30e>
 9cc:	80 91 e8 00 	lds	r24, 0x00E8
 9d0:	81 11       	cpse	r24, r1
 9d2:	0b c0       	rjmp	.+22     	; 0x9ea <main+0x30e>
			{
				OCR0 = 255;
 9d4:	cc bf       	out	0x3c, r28	; 60
				SetPWMOutput_Righttotal();
 9d6:	0e 94 0e 03 	call	0x61c	; 0x61c <SetPWMOutput_Righttotal>
		if (Ret == 0x66)  // total left
		{
			Lcd4_Clear();
			Lcd4_Set_Cursor(1,0);
			Lcd4_Write_String("Left");
			while (Limit_Right == 0 && STOP_command == 0)
 9da:	80 91 ea 00 	lds	r24, 0x00EA
 9de:	81 11       	cpse	r24, r1
 9e0:	04 c0       	rjmp	.+8      	; 0x9ea <main+0x30e>
 9e2:	80 91 e8 00 	lds	r24, 0x00E8
 9e6:	88 23       	and	r24, r24
 9e8:	a9 f3       	breq	.-22     	; 0x9d4 <main+0x2f8>
			{
				OCR0 = 255;
				SetPWMOutput_Righttotal();
			}
			OCR0 = 0;
 9ea:	1c be       	out	0x3c, r1	; 60
			if (STOP_command == 0)
 9ec:	80 91 e8 00 	lds	r24, 0x00E8
 9f0:	81 11       	cpse	r24, r1
 9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <main+0x31c>
			{
				SetPWMOutput_Left();
 9f4:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <SetPWMOutput_Left>
 9f8:	9f e7       	ldi	r25, 0x7F	; 127
 9fa:	2a e1       	ldi	r18, 0x1A	; 26
 9fc:	86 e0       	ldi	r24, 0x06	; 6
 9fe:	91 50       	subi	r25, 0x01	; 1
 a00:	20 40       	sbci	r18, 0x00	; 0
 a02:	80 40       	sbci	r24, 0x00	; 0
 a04:	e1 f7       	brne	.-8      	; 0x9fe <main+0x322>
 a06:	00 c0       	rjmp	.+0      	; 0xa08 <main+0x32c>
 a08:	00 00       	nop
			}
			_delay_ms(250);
			OCR0 = 0;        //stop
 a0a:	1c be       	out	0x3c, r1	; 60
			//PORTB = (0<<PB0);//stop
			PORTB = ((0<<PB0) | (0<<PB1));
 a0c:	18 ba       	out	0x18, r1	; 24
			Limit_Left = 0;
 a0e:	10 92 e9 00 	sts	0x00E9, r1
			if (STOP_command == 1)
 a12:	80 91 e8 00 	lds	r24, 0x00E8
 a16:	81 30       	cpi	r24, 0x01	; 1
 a18:	29 f4       	brne	.+10     	; 0xa24 <main+0x348>
			{
				STOP_command = 0;
 a1a:	10 92 e8 00 	sts	0x00E8, r1
				Ret = 0;
 a1e:	10 92 ec 00 	sts	0x00EC, r1
				continue;
 a22:	75 ce       	rjmp	.-790    	; 0x70e <main+0x32>
			}
			Lcd4_Clear();
 a24:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
			Lcd4_Set_Cursor(1,0);
 a28:	60 e0       	ldi	r22, 0x00	; 0
 a2a:	81 e0       	ldi	r24, 0x01	; 1
 a2c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
			Lcd4_Write_String("Left position");
 a30:	82 ec       	ldi	r24, 0xC2	; 194
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	0e 94 89 02 	call	0x512	; 0x512 <Lcd4_Write_String>
 a38:	9f ef       	ldi	r25, 0xFF	; 255
 a3a:	29 e6       	ldi	r18, 0x69	; 105
 a3c:	88 e1       	ldi	r24, 0x18	; 24
 a3e:	91 50       	subi	r25, 0x01	; 1
 a40:	20 40       	sbci	r18, 0x00	; 0
 a42:	80 40       	sbci	r24, 0x00	; 0
 a44:	e1 f7       	brne	.-8      	; 0xa3e <main+0x362>
 a46:	00 c0       	rjmp	.+0      	; 0xa48 <main+0x36c>
 a48:	00 00       	nop
			_delay_ms(1000);
			for (int i = 0; i < 3; i++)
			{
				USART_Transmit(Scan_Complete[i]);
 a4a:	8c ea       	ldi	r24, 0xAC	; 172
 a4c:	0e 94 30 03 	call	0x660	; 0x660 <USART_Transmit>
 a50:	8f e5       	ldi	r24, 0x5F	; 95
 a52:	9a ee       	ldi	r25, 0xEA	; 234
 a54:	01 97       	sbiw	r24, 0x01	; 1
 a56:	f1 f7       	brne	.-4      	; 0xa54 <main+0x378>
 a58:	00 c0       	rjmp	.+0      	; 0xa5a <main+0x37e>
 a5a:	00 00       	nop
 a5c:	84 e4       	ldi	r24, 0x44	; 68
 a5e:	0e 94 30 03 	call	0x660	; 0x660 <USART_Transmit>
 a62:	8f e5       	ldi	r24, 0x5F	; 95
 a64:	9a ee       	ldi	r25, 0xEA	; 234
 a66:	01 97       	sbiw	r24, 0x01	; 1
 a68:	f1 f7       	brne	.-4      	; 0xa66 <main+0x38a>
 a6a:	00 c0       	rjmp	.+0      	; 0xa6c <main+0x390>
 a6c:	00 00       	nop
 a6e:	88 e8       	ldi	r24, 0x88	; 136
 a70:	0e 94 30 03 	call	0x660	; 0x660 <USART_Transmit>
 a74:	8f e5       	ldi	r24, 0x5F	; 95
 a76:	9a ee       	ldi	r25, 0xEA	; 234
 a78:	01 97       	sbiw	r24, 0x01	; 1
 a7a:	f1 f7       	brne	.-4      	; 0xa78 <main+0x39c>
 a7c:	00 c0       	rjmp	.+0      	; 0xa7e <main+0x3a2>
 a7e:	00 00       	nop
				_delay_ms(30);
			}
			Lcd4_Clear();
 a80:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
			Ret = 0;
 a84:	10 92 ec 00 	sts	0x00EC, r1
			continue;
 a88:	42 ce       	rjmp	.-892    	; 0x70e <main+0x32>
			
		}
		if (Ret == 0x44) // total right
 a8a:	84 34       	cpi	r24, 0x44	; 68
 a8c:	09 f0       	breq	.+2      	; 0xa90 <main+0x3b4>
 a8e:	3f ce       	rjmp	.-898    	; 0x70e <main+0x32>
		{
			Lcd4_Clear();
 a90:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
			Lcd4_Set_Cursor(1,0);
 a94:	60 e0       	ldi	r22, 0x00	; 0
 a96:	81 e0       	ldi	r24, 0x01	; 1
 a98:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
			Lcd4_Write_String("Right");
 a9c:	80 ed       	ldi	r24, 0xD0	; 208
 a9e:	90 e0       	ldi	r25, 0x00	; 0
 aa0:	0e 94 89 02 	call	0x512	; 0x512 <Lcd4_Write_String>
			while (Limit_Left == 0 && STOP_command == 0)
 aa4:	80 91 e9 00 	lds	r24, 0x00E9
 aa8:	81 11       	cpse	r24, r1
 aaa:	0f c0       	rjmp	.+30     	; 0xaca <main+0x3ee>
 aac:	80 91 e8 00 	lds	r24, 0x00E8
 ab0:	81 11       	cpse	r24, r1
 ab2:	0b c0       	rjmp	.+22     	; 0xaca <main+0x3ee>
			{
				OCR0 = 255;
 ab4:	cc bf       	out	0x3c, r28	; 60
				SetPWMOutput_Lefttotal();
 ab6:	0e 94 01 03 	call	0x602	; 0x602 <SetPWMOutput_Lefttotal>
		if (Ret == 0x44) // total right
		{
			Lcd4_Clear();
			Lcd4_Set_Cursor(1,0);
			Lcd4_Write_String("Right");
			while (Limit_Left == 0 && STOP_command == 0)
 aba:	80 91 e9 00 	lds	r24, 0x00E9
 abe:	81 11       	cpse	r24, r1
 ac0:	04 c0       	rjmp	.+8      	; 0xaca <main+0x3ee>
 ac2:	80 91 e8 00 	lds	r24, 0x00E8
 ac6:	88 23       	and	r24, r24
 ac8:	a9 f3       	breq	.-22     	; 0xab4 <main+0x3d8>
			{
				OCR0 = 255;
				SetPWMOutput_Lefttotal();
			}
			OCR0 = 0;
 aca:	1c be       	out	0x3c, r1	; 60
			if (STOP_command == 0)
 acc:	80 91 e8 00 	lds	r24, 0x00E8
 ad0:	81 11       	cpse	r24, r1
 ad2:	02 c0       	rjmp	.+4      	; 0xad8 <main+0x3fc>
			{
				SetPWMOutput_Right();
 ad4:	0e 94 07 03 	call	0x60e	; 0x60e <SetPWMOutput_Right>
 ad8:	9f ef       	ldi	r25, 0xFF	; 255
 ada:	22 e5       	ldi	r18, 0x52	; 82
 adc:	87 e0       	ldi	r24, 0x07	; 7
 ade:	91 50       	subi	r25, 0x01	; 1
 ae0:	20 40       	sbci	r18, 0x00	; 0
 ae2:	80 40       	sbci	r24, 0x00	; 0
 ae4:	e1 f7       	brne	.-8      	; 0xade <main+0x402>
 ae6:	00 c0       	rjmp	.+0      	; 0xae8 <main+0x40c>
 ae8:	00 00       	nop
			}
			_delay_ms(300);
			OCR0 = 0;        //stop
 aea:	1c be       	out	0x3c, r1	; 60
			//PORTB = (0<<PB0);//stop
			PORTB = ((0<<PB0) | (0<<PB1));
 aec:	18 ba       	out	0x18, r1	; 24
			Limit_Right = 0;
 aee:	10 92 ea 00 	sts	0x00EA, r1
			if (STOP_command == 1)
 af2:	80 91 e8 00 	lds	r24, 0x00E8
 af6:	81 30       	cpi	r24, 0x01	; 1
 af8:	29 f4       	brne	.+10     	; 0xb04 <main+0x428>
			{
				STOP_command = 0;
 afa:	10 92 e8 00 	sts	0x00E8, r1
				Ret = 0;
 afe:	10 92 ec 00 	sts	0x00EC, r1
				continue;
 b02:	05 ce       	rjmp	.-1014   	; 0x70e <main+0x32>
			}
			
			Lcd4_Clear();
 b04:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
			Lcd4_Set_Cursor(1,0);
 b08:	60 e0       	ldi	r22, 0x00	; 0
 b0a:	81 e0       	ldi	r24, 0x01	; 1
 b0c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
			Lcd4_Write_String("Right position");
 b10:	86 ed       	ldi	r24, 0xD6	; 214
 b12:	90 e0       	ldi	r25, 0x00	; 0
 b14:	0e 94 89 02 	call	0x512	; 0x512 <Lcd4_Write_String>
 b18:	9f ef       	ldi	r25, 0xFF	; 255
 b1a:	29 e6       	ldi	r18, 0x69	; 105
 b1c:	88 e1       	ldi	r24, 0x18	; 24
 b1e:	91 50       	subi	r25, 0x01	; 1
 b20:	20 40       	sbci	r18, 0x00	; 0
 b22:	80 40       	sbci	r24, 0x00	; 0
 b24:	e1 f7       	brne	.-8      	; 0xb1e <main+0x442>
 b26:	00 c0       	rjmp	.+0      	; 0xb28 <main+0x44c>
 b28:	00 00       	nop
			_delay_ms(1000);
			for (int i = 0; i < 3; i++)
			{
				USART_Transmit(Scan_Complete[i]);
 b2a:	8c ea       	ldi	r24, 0xAC	; 172
 b2c:	0e 94 30 03 	call	0x660	; 0x660 <USART_Transmit>
 b30:	8f e5       	ldi	r24, 0x5F	; 95
 b32:	9a ee       	ldi	r25, 0xEA	; 234
 b34:	01 97       	sbiw	r24, 0x01	; 1
 b36:	f1 f7       	brne	.-4      	; 0xb34 <main+0x458>
 b38:	00 c0       	rjmp	.+0      	; 0xb3a <main+0x45e>
 b3a:	00 00       	nop
 b3c:	84 e4       	ldi	r24, 0x44	; 68
 b3e:	0e 94 30 03 	call	0x660	; 0x660 <USART_Transmit>
 b42:	8f e5       	ldi	r24, 0x5F	; 95
 b44:	9a ee       	ldi	r25, 0xEA	; 234
 b46:	01 97       	sbiw	r24, 0x01	; 1
 b48:	f1 f7       	brne	.-4      	; 0xb46 <main+0x46a>
 b4a:	00 c0       	rjmp	.+0      	; 0xb4c <main+0x470>
 b4c:	00 00       	nop
 b4e:	88 e8       	ldi	r24, 0x88	; 136
 b50:	0e 94 30 03 	call	0x660	; 0x660 <USART_Transmit>
 b54:	8f e5       	ldi	r24, 0x5F	; 95
 b56:	9a ee       	ldi	r25, 0xEA	; 234
 b58:	01 97       	sbiw	r24, 0x01	; 1
 b5a:	f1 f7       	brne	.-4      	; 0xb58 <main+0x47c>
 b5c:	00 c0       	rjmp	.+0      	; 0xb5e <main+0x482>
 b5e:	00 00       	nop
				_delay_ms(30);
			}
			Lcd4_Clear();
 b60:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
			Ret = 0;
 b64:	10 92 ec 00 	sts	0x00EC, r1
			continue;
 b68:	d2 cd       	rjmp	.-1116   	; 0x70e <main+0x32>

00000b6a <Check_MSG>:
const unsigned char Receive_OK[] = {0xAC, 0x22, 0x88};
const unsigned char Receive_FAIL[] = {0xAC, 0x33, 0x88};
unsigned char Receive[3];

unsigned char Check_MSG()
{
 b6a:	cf 93       	push	r28
 b6c:	df 93       	push	r29
	for (int i = 0; i < 3; i++)
	{
		Receive[i] = USART_Receive();
 b6e:	0e 94 34 03 	call	0x668	; 0x668 <USART_Receive>
 b72:	cd ee       	ldi	r28, 0xED	; 237
 b74:	d0 e0       	ldi	r29, 0x00	; 0
 b76:	88 83       	st	Y, r24
 b78:	0e 94 34 03 	call	0x668	; 0x668 <USART_Receive>
 b7c:	80 93 ee 00 	sts	0x00EE, r24
 b80:	0e 94 34 03 	call	0x668	; 0x668 <USART_Receive>
 b84:	80 93 ef 00 	sts	0x00EF, r24
	}
	if (Receive[0] == 0xAB && Receive[1] == 0x11 && Receive[2] == 0x99)
 b88:	98 81       	ld	r25, Y
 b8a:	9b 3a       	cpi	r25, 0xAB	; 171
 b8c:	09 f0       	breq	.+2      	; 0xb90 <Check_MSG+0x26>
 b8e:	4b c0       	rjmp	.+150    	; 0xc26 <Check_MSG+0xbc>
 b90:	20 91 ee 00 	lds	r18, 0x00EE
 b94:	21 31       	cpi	r18, 0x11	; 17
 b96:	19 f5       	brne	.+70     	; 0xbde <Check_MSG+0x74>
 b98:	89 39       	cpi	r24, 0x99	; 153
 b9a:	09 f0       	breq	.+2      	; 0xb9e <Check_MSG+0x34>
 b9c:	5c c0       	rjmp	.+184    	; 0xc56 <Check_MSG+0xec>
	{
		for (int i = 0; i < 3; i++)
		{
			USART_Transmit(Receive_OK[i]);
 b9e:	8c ea       	ldi	r24, 0xAC	; 172
 ba0:	90 e0       	ldi	r25, 0x00	; 0
 ba2:	0e 94 30 03 	call	0x660	; 0x660 <USART_Transmit>
 ba6:	8b e4       	ldi	r24, 0x4B	; 75
 ba8:	9d e1       	ldi	r25, 0x1D	; 29
 baa:	01 97       	sbiw	r24, 0x01	; 1
 bac:	f1 f7       	brne	.-4      	; 0xbaa <Check_MSG+0x40>
 bae:	00 c0       	rjmp	.+0      	; 0xbb0 <Check_MSG+0x46>
 bb0:	00 00       	nop
 bb2:	82 e2       	ldi	r24, 0x22	; 34
 bb4:	90 e0       	ldi	r25, 0x00	; 0
 bb6:	0e 94 30 03 	call	0x660	; 0x660 <USART_Transmit>
 bba:	8b e4       	ldi	r24, 0x4B	; 75
 bbc:	9d e1       	ldi	r25, 0x1D	; 29
 bbe:	01 97       	sbiw	r24, 0x01	; 1
 bc0:	f1 f7       	brne	.-4      	; 0xbbe <Check_MSG+0x54>
 bc2:	00 c0       	rjmp	.+0      	; 0xbc4 <Check_MSG+0x5a>
 bc4:	00 00       	nop
 bc6:	88 e8       	ldi	r24, 0x88	; 136
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	0e 94 30 03 	call	0x660	; 0x660 <USART_Transmit>
 bce:	8b e4       	ldi	r24, 0x4B	; 75
 bd0:	9d e1       	ldi	r25, 0x1D	; 29
 bd2:	01 97       	sbiw	r24, 0x01	; 1
 bd4:	f1 f7       	brne	.-4      	; 0xbd2 <Check_MSG+0x68>
 bd6:	00 c0       	rjmp	.+0      	; 0xbd8 <Check_MSG+0x6e>
 bd8:	00 00       	nop
			_delay_ms(30);
		}
		return START;
 bda:	82 e2       	ldi	r24, 0x22	; 34
 bdc:	57 c0       	rjmp	.+174    	; 0xc8c <Check_MSG+0x122>
	}
	else if (Receive[0] == 0xAB && Receive[1] == 0x00 && Receive[2] == 0x99)
 bde:	21 11       	cpse	r18, r1
 be0:	3a c0       	rjmp	.+116    	; 0xc56 <Check_MSG+0xec>
 be2:	89 39       	cpi	r24, 0x99	; 153
 be4:	c1 f5       	brne	.+112    	; 0xc56 <Check_MSG+0xec>
	{
		for (int i = 0; i < 3; i++)
		{
			USART_Transmit(Receive_FAIL[i]);
 be6:	8c ea       	ldi	r24, 0xAC	; 172
 be8:	90 e0       	ldi	r25, 0x00	; 0
 bea:	0e 94 30 03 	call	0x660	; 0x660 <USART_Transmit>
 bee:	8b e4       	ldi	r24, 0x4B	; 75
 bf0:	9d e1       	ldi	r25, 0x1D	; 29
 bf2:	01 97       	sbiw	r24, 0x01	; 1
 bf4:	f1 f7       	brne	.-4      	; 0xbf2 <Check_MSG+0x88>
 bf6:	00 c0       	rjmp	.+0      	; 0xbf8 <Check_MSG+0x8e>
 bf8:	00 00       	nop
 bfa:	83 e3       	ldi	r24, 0x33	; 51
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	0e 94 30 03 	call	0x660	; 0x660 <USART_Transmit>
 c02:	8b e4       	ldi	r24, 0x4B	; 75
 c04:	9d e1       	ldi	r25, 0x1D	; 29
 c06:	01 97       	sbiw	r24, 0x01	; 1
 c08:	f1 f7       	brne	.-4      	; 0xc06 <Check_MSG+0x9c>
 c0a:	00 c0       	rjmp	.+0      	; 0xc0c <Check_MSG+0xa2>
 c0c:	00 00       	nop
 c0e:	88 e8       	ldi	r24, 0x88	; 136
 c10:	90 e0       	ldi	r25, 0x00	; 0
 c12:	0e 94 30 03 	call	0x660	; 0x660 <USART_Transmit>
 c16:	8b e4       	ldi	r24, 0x4B	; 75
 c18:	9d e1       	ldi	r25, 0x1D	; 29
 c1a:	01 97       	sbiw	r24, 0x01	; 1
 c1c:	f1 f7       	brne	.-4      	; 0xc1a <Check_MSG+0xb0>
 c1e:	00 c0       	rjmp	.+0      	; 0xc20 <Check_MSG+0xb6>
 c20:	00 00       	nop
			_delay_ms(30);
		}
		return STOP;
 c22:	81 e1       	ldi	r24, 0x11	; 17
 c24:	33 c0       	rjmp	.+102    	; 0xc8c <Check_MSG+0x122>
	}
	else if (Receive[0] == 0x88 && Receive[1] == 0x88 && Receive[2] == 0x88)
 c26:	98 38       	cpi	r25, 0x88	; 136
 c28:	69 f4       	brne	.+26     	; 0xc44 <Check_MSG+0xda>
 c2a:	20 91 ee 00 	lds	r18, 0x00EE
 c2e:	28 38       	cpi	r18, 0x88	; 136
 c30:	e1 f4       	brne	.+56     	; 0xc6a <Check_MSG+0x100>
 c32:	88 38       	cpi	r24, 0x88	; 136
 c34:	d1 f4       	brne	.+52     	; 0xc6a <Check_MSG+0x100>
	{
		Receive[0] = 0;
 c36:	10 92 ed 00 	sts	0x00ED, r1
		Receive[1] = 0;
 c3a:	10 92 ee 00 	sts	0x00EE, r1
		Receive[2] = 0;
 c3e:	10 92 ef 00 	sts	0x00EF, r1
		return LEFT;
 c42:	24 c0       	rjmp	.+72     	; 0xc8c <Check_MSG+0x122>
	}
	else if (Receive[0] == 0x99 && Receive[1] == 0x99 && Receive[2] == 0x99)
 c44:	99 39       	cpi	r25, 0x99	; 153
 c46:	39 f4       	brne	.+14     	; 0xc56 <Check_MSG+0xec>
 c48:	90 91 ee 00 	lds	r25, 0x00EE
 c4c:	99 39       	cpi	r25, 0x99	; 153
 c4e:	e9 f4       	brne	.+58     	; 0xc8a <Check_MSG+0x120>
 c50:	89 39       	cpi	r24, 0x99	; 153
 c52:	d9 f4       	brne	.+54     	; 0xc8a <Check_MSG+0x120>
 c54:	1b c0       	rjmp	.+54     	; 0xc8c <Check_MSG+0x122>
	{
		return RIGHT;
	}
	else if (Receive[0] == 0x44 && Receive[1] == 0x44 && Receive[2] == 0x44)
 c56:	94 34       	cpi	r25, 0x44	; 68
 c58:	41 f4       	brne	.+16     	; 0xc6a <Check_MSG+0x100>
 c5a:	90 91 ee 00 	lds	r25, 0x00EE
 c5e:	94 34       	cpi	r25, 0x44	; 68
 c60:	71 f4       	brne	.+28     	; 0xc7e <Check_MSG+0x114>
 c62:	84 34       	cpi	r24, 0x44	; 68
 c64:	99 f0       	breq	.+38     	; 0xc8c <Check_MSG+0x122>
	}
	else if (Receive[0] == 0x66 && Receive[1] == 0x66 && Receive[2] == 0x66)
	{
		return TOTALRIGHT;
	}
	else return ERROR;
 c66:	8f ef       	ldi	r24, 0xFF	; 255
 c68:	11 c0       	rjmp	.+34     	; 0xc8c <Check_MSG+0x122>
	}
	else if (Receive[0] == 0x44 && Receive[1] == 0x44 && Receive[2] == 0x44)
	{
		return TOTALLEFT;
	}
	else if (Receive[0] == 0x66 && Receive[1] == 0x66 && Receive[2] == 0x66)
 c6a:	96 36       	cpi	r25, 0x66	; 102
 c6c:	51 f4       	brne	.+20     	; 0xc82 <Check_MSG+0x118>
 c6e:	90 91 ee 00 	lds	r25, 0x00EE
 c72:	96 36       	cpi	r25, 0x66	; 102
 c74:	41 f4       	brne	.+16     	; 0xc86 <Check_MSG+0x11c>
 c76:	86 36       	cpi	r24, 0x66	; 102
 c78:	49 f0       	breq	.+18     	; 0xc8c <Check_MSG+0x122>
	{
		return TOTALRIGHT;
	}
	else return ERROR;
 c7a:	8f ef       	ldi	r24, 0xFF	; 255
 c7c:	07 c0       	rjmp	.+14     	; 0xc8c <Check_MSG+0x122>
 c7e:	8f ef       	ldi	r24, 0xFF	; 255
 c80:	05 c0       	rjmp	.+10     	; 0xc8c <Check_MSG+0x122>
 c82:	8f ef       	ldi	r24, 0xFF	; 255
 c84:	03 c0       	rjmp	.+6      	; 0xc8c <Check_MSG+0x122>
 c86:	8f ef       	ldi	r24, 0xFF	; 255
 c88:	01 c0       	rjmp	.+2      	; 0xc8c <Check_MSG+0x122>
 c8a:	8f ef       	ldi	r24, 0xFF	; 255
	
 c8c:	df 91       	pop	r29
 c8e:	cf 91       	pop	r28
 c90:	08 95       	ret

00000c92 <_exit>:
 c92:	f8 94       	cli

00000c94 <__stop_program>:
 c94:	ff cf       	rjmp	.-2      	; 0xc94 <__stop_program>
